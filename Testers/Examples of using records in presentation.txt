//
// Replace this method in SHUBOPresenter.java with this code 
// !-!-! Just keep any existing code betwwe start of method up to model.StartInitial(); !-!-!
// Then run in debug mode and step through it to see how it works
// Use the SHUBORecord class to shuttle data outside of presentation layer.
//

    public void StartInitial() {
        // Called by MainActivity to start any intial synchronization before any methods are called

        // Add any code required

        // this must be called last
        model.StartInitial();

        {
            // DEBUG: TESTING ---- START ----

            //
            // Start our with a clean slate for testing and delete all the events in calendar (if any)
            //
            ArrayList<Long> AllRecords = model.GetRecordIDs();
            if (AllRecords.size() > 0) {
                // For testing we want no events so delete any found
                for (int i = 0; i < AllRecords.size(); i++) {
                    if (model.DeleteRecord(AllRecords.get(i)) == false){
                        Log.d("Testing SHUBOModel", "Failed to delete RecID: " + AllRecords.get(i));
                    }
                }
            }
            String Title = "Test Event ";
            String Description = "Test Description ";
            String CourseName = "COMP-7082-0 of ";
            boolean IsGroup = false;

            //
            // Ugly way to create a record but you may need to do it this way for
            // event on same day 2020-11-18 from 18:00 to 19:00 hours
            //
            Calendar beginTime = Calendar.getInstance();
            beginTime.set(2020, 11, 18, 18, 00);
            long StartDate = beginTime.getTimeInMillis();
            Calendar endTime = Calendar.getInstance();
            endTime.set(2020, 11, 18, 19, 00);
            long EndDate = endTime.getTimeInMillis();

            SHUBORecord ARec1 = new SHUBORecord(-1, Title + 1, Description + 1, CourseName + "_1", IsGroup, StartDate, EndDate);
            ARec1.RecordID = model.AddRecord(ARec1);

            //
            // Create a record without start and end dates in constructor than manual add
            // an event from: 2020-11-20 13:30 to: 2020-11-20 15:50
            //
            SHUBORecord ARec2 = new SHUBORecord(-1, Title + 2, Description + 2, CourseName + "_2", IsGroup);
            ARec2.SetStartDate(2020, 11, 20, 13, 30);
            ARec2.SetEndDate(2020, 11, 20, 15, 50);
            ARec2.RecordID = model.AddRecord(ARec2);

            //
            // Create a record without start and end dates in constructor than manual add
            // an event ALL day: 2020-11-20
            //
            SHUBORecord ARec3 = new SHUBORecord(-1, Title + 2, Description + 2, CourseName + "_2", IsGroup);
            ARec3.SetAllDayDate(2020, 11, 19);
            ARec3.RecordID = model.AddRecord(ARec3);

            //
            // Retrieve all the record IDs that have been saved in calendar regardless of dates
            // Then write them to debug log (must be running in debug to see the data in console)
            //
            AllRecords = model.GetRecordIDs();
            SHUBORecord ARec4 = new SHUBORecord();
            for (int i = 0; i < AllRecords.size(); i++)
            {
                ARec4 = model.GetRecord(AllRecords.get(i));
                beginTime.setTimeInMillis(ARec4.GetStartDate());
                endTime.setTimeInMillis(ARec4.GetEndDate());
                Log.d("Testing SHUBOModel", "RecID: " + ARec4.RecordID
                                                 + " RecTitle: " + ARec4.Title
                                                 + " RecDescription: " + ARec4.Description
                                                 + " RecCourseName: " + ARec4.CourseName
                                                 + " RecIsGroup: " + ARec4.IsGroup
                                                 + " RecStartDate: " + ARec4.GetDateTimeFormat(true)
                                                 + " RecEndDate: " + ARec4.GetDateTimeFormat(false));
            }

            //
            // Update the current records with new description, course name and change to groups
            // Then write them to debug log (must be running in debug to see the data in console)
            //
            for (int i = 0; i < AllRecords.size(); i++)
            {
                ARec4 = model.GetRecord(AllRecords.get(i));
                ARec4.Description = "New Test Description " + i;
                ARec4.CourseName = "New COMP-7093-0 of " + i;
                ARec4.IsGroup = true;
                if (model.UpdateRecord(ARec4) == false) {
                    Log.d("Testing SHUBOModel", "Failed to update RecID: " + ARec4.RecordID);
                } else {
                    // Success so read it back and confirm
                    ARec4 = model.GetRecord(ARec4.RecordID);
                    if (ARec4 != null) {
                        Log.d("Testing SHUBOModel", "RecID: " + ARec4.RecordID
                                + " RecTitle: " + ARec4.Title
                                + " RecDescription: " + ARec4.Description
                                + " RecCourseName: " + ARec4.CourseName
                                + " RecIsGroup: " + ARec4.IsGroup
                                + " RecStartDate: " + ARec4.GetDateTimeFormat(true)
                                + " RecEndDate: " + ARec4.GetDateTimeFormat(false));
                    } else {
                        Log.d("Testing SHUBOModel", "Failed to get updated RecID: " + ARec4.RecordID);
                    }
                }
            }

            // DEBUG: TESTING ---- END ----
        }
    }
